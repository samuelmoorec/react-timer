{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","timeStarted","setTimeStarted","timeFinished","setTimeFinished","timer","setTimer","isTimerActive","setisTimerActive","prevTimes","setPrevTimes","laps","setLaps","useEffect","timerID","setInterval","tick","clearInterval","displayTimer","undefined","Moment","diff","toFixed","addupTimes","sum","forEach","num","addPrevTime","arr","push","reset","displayLaps","map","lap","index","className","onClick","valueOf","disabled","length","Number","parseFloat","reduce","total","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAqHeA,MAjHf,WAAgB,IAAD,EAEyBC,qBAFzB,mBAENC,EAFM,KAEOC,EAFP,OAG2BF,qBAH3B,mBAGNG,EAHM,KAGQC,EAHR,OAIaJ,mBAAiB,QAJ9B,mBAINK,EAJM,KAICC,EAJD,OAK6BN,oBAAkB,GAL/C,mBAKNO,EALM,KAKSC,EALT,OAMqBR,mBAAmB,IANxC,mBAMNS,EANM,KAMKC,EANL,OAOWV,mBAAmB,IAP9B,mBAONW,EAPM,KAOAC,EAPA,KASbC,qBAAU,WAER,IAAIC,EAAUC,aAAY,kBAAMC,MAC9B,IACF,OAAO,WACLC,cAAcH,OAKlB,IAAME,EAAO,WACRT,GACHD,EAASY,MAiBLA,EAAe,WACnB,YAAmBC,IAAhBlB,EACM,YACiBkB,IAAjBhB,GACCiB,MAASC,KAAKD,IAAOnB,GAAa,gBAAgB,KAAMqB,QAAQ,QAChDH,IAAjBhB,IACEiB,MAASC,KAAKD,IAAOnB,GAAa,gBAAkBsB,KAAc,KAAMD,QAAQ,GAElF,IAKLC,EAAa,WACjB,IAAIC,EAAM,EAEV,OADAf,EAAUgB,SAAQ,SAAAC,GAAG,OAAIF,GAAOE,KACzBF,GAGHG,EAAc,SAACC,GAGnB,OAFAA,EAAIC,KAAKT,MAASC,KAAKD,IAAOnB,GAAa,iBAEpC2B,GASHE,EAAQ,WACZxB,EAAS,QACTE,GAAiB,GACjBE,EAAa,IACbE,EAAQ,KAgBNmB,EAAcpB,EAAKqB,KAAI,SAACC,EAAKC,GAAN,OAAgB,6BAAK,kCAAQA,EAAQ,EAAhB,OAAsB,0BAAMC,UAAU,aAAaF,EAAIX,QAAQ,SAU/G,OACE,yBAAKa,UAAU,mBACb,uBAAGA,UAAU,SAAS9B,GACtB,4BAAQ+B,QA7EQ,WAEd7B,GAGFH,EAAgBgB,MAASiB,WACzB3B,EAAaiB,EAAYlB,KAHzBP,EAAekB,MAASiB,WAO1B7B,GAAiB,SAACH,GAAD,OAAqBA,OA6BnCE,EACI,cACK,eAqCV,6BACA,4BAAQ6B,QAASN,GAAjB,SACA,6BACA,4BAAQQ,UAAW/B,EAAe6B,QA9BvB,WACV7B,IACkB,IAAhBI,EAAK4B,QACN5B,EAAKkB,KAAKW,OAAOC,WAAWpC,IAC5BO,EAAQD,KAERA,EAAKkB,KAAMW,OAAOC,WAAWpC,GAASM,EAAK+B,QAAO,SAACC,EAAOjB,GAAR,OAAgBiB,EAAQjB,MAC1Ed,EAAQD,OAuBV,OACA,6BAAMoB,KCnGQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b0696c01.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Moment from 'moment'\nimport './App.css';\n\nfunction App() {\n\n  const [timeStarted, setTimeStarted] = useState<number>();\n  const [timeFinished, setTimeFinished] = useState<number>();\n  const [timer, setTimer] = useState<string>(\"0.00\");\n  const [isTimerActive, setisTimerActive] = useState<boolean>(false);\n  const [prevTimes, setPrevTimes] = useState<number[]>([]);\n  const [laps, setLaps] = useState<number[]>([]);\n\n  useEffect(() => {\n\n    var timerID = setInterval(() => tick()\n    , 10);\n    return function cleanup() {\n      clearInterval(timerID);\n    }\n  });\n\n\n  const tick = () => {\n    if(isTimerActive){\n    setTimer(displayTimer());\n    }\n  }\n\n  const toggleTimer = () => {\n\n    if(!isTimerActive){\n      setTimeStarted(Moment().valueOf());\n    }else{\n      setTimeFinished(Moment().valueOf());\n      setPrevTimes(addPrevTime(prevTimes))\n    }\n\n\n    setisTimerActive((timer: boolean) => !timer)\n  };\n\n  const displayTimer = () => {\n    if(timeStarted === undefined){\n      return \"0.00\"\n    }else if(timeFinished === undefined){\n      return (Moment().diff(Moment(timeStarted),'milliseconds')/1000).toFixed(2);\n    }else if(timeFinished !== undefined){\n      return ((Moment().diff(Moment(timeStarted),'milliseconds') + addupTimes())/1000).toFixed(2);\n    }else{\n      return \"\"\n    }\n\n  }\n\n  const addupTimes = () => {\n    let sum = 0;\n    prevTimes.forEach(num => sum += num);\n    return sum;\n  }\n\n  const addPrevTime = (arr: number[]) => {\n    arr.push(Moment().diff(Moment(timeStarted),'milliseconds'));\n    \n    return arr;\n  }\n\n  const toggleButtonText = () => {\n    if(isTimerActive)\n    return \"Pause Timer\"\n    else return \"Start Timer\"\n  }\n\n  const reset = () => {\n    setTimer(\"0.00\");\n    setisTimerActive(false);\n    setPrevTimes([]);\n    setLaps([]);\n  }\n\n  const addLap = () => {\n    if(isTimerActive){\n      if(laps.length === 0){\n        laps.push(Number.parseFloat(timer));\n        setLaps(laps);\n      }else{\n        laps.push((Number.parseFloat(timer) - laps.reduce((total, num) => total + num)));\n        setLaps(laps);\n      }\n    }\n  }\n\n  \n  let displayLaps = laps.map((lap, index) => <div><p>lap {index + 1},   <span className=\"timerfont\">{lap.toFixed(2)}</span></p></div>);\n\n  let lapButton = () => {\n    if(isTimerActive){\n      return <button onClick={reset}>Reset</button>\n    }else{\n      return <button disabled onClick={reset}>Reset</button>\n    }\n  }\n\n  return (\n    <div className=\"timer_container\">\n      <p className=\"timer\">{timer}</p>\n      <button onClick={toggleTimer}>{toggleButtonText()}</button>\n      <br/>\n      <button onClick={reset}>Reset</button>\n      <br/>\n      <button disabled={!isTimerActive} onClick={addLap}>Lap</button>\n      <div>{displayLaps}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}